/**
 * The type of messages our frames our sending
 * @type {String}
 */
export declare const messageType = "application/x-postmate-v1+json";
/**
 * The maximum number of attempts to send a handshake request to the parent
 * @type {Number}
 */
export declare const maxHandshakeRequests = 5;
/**
 * Increments and returns a message ID
 * @return {Number} A unique ID for a message
 */
export declare const generateNewMessageId: () => number;
/**
 * Postmate logging function that enables/disables via config
 */
export declare const log: (...args: any[]) => void;
/**
 * Takes a URL and returns the origin
 * @param  {String} url The full URL being requested
 * @return {String}     The URLs origin
 */
export declare const resolveOrigin: (url: any) => string;
/**
 * Ensures that a message is safe to interpret
 * @param  {Object} message The postmate message being sent
 * @param  {String|Boolean} allowedOrigin The whitelisted origin or false to skip origin check
 * @return {Boolean}
 */
export declare const sanitize: (message: any, allowedOrigin: any) => boolean;
/**
 * Takes a model, and searches for a value by the property
 * @param  {Object} model     The dictionary to search against
 * @param  {String} property  A path within a dictionary (i.e. 'window.location.href')
 *                            passed to functions in the child model
 * @return {Promise}
 */
export declare const resolveValue: (model: any, property: any) => Promise<any>;
/**
 * Composes an API to be used by the parent
 * @param {Object} info Information on the consumer
 */
export declare class ParentAPI {
    parent: Window;
    frame: HTMLIFrameElement;
    child: Window;
    events: {};
    childOrigin: string;
    listener: (e: any) => void;
    constructor(info: Postmate);
    get(property: any): Promise<unknown>;
    call(property: any, data: any): void;
    on(eventName: any, callback: any): void;
    destroy(): void;
}
/**
 * Composes an API to be used by the child
 * @param {Object} info Information on the consumer
 */
export declare class ChildAPI {
    private model;
    private parent;
    private parentOrigin;
    private child;
    constructor(info: Model);
    emit(name: any, data: any): void;
}
export declare type PostMateOptions = {
    container: HTMLElement;
    url: string;
    id?: string;
    classListArray?: Array<string>;
    name?: string;
    model?: any;
};
/**
 * The entry point of the Parent.
 */
export declare class Postmate {
    static debug: boolean;
    container?: HTMLElement;
    parent: Window;
    frame: HTMLIFrameElement;
    child?: Window;
    childOrigin?: string;
    url: string;
    model: any;
    static Model: any;
    /**
     * @param opts
     */
    constructor(opts: PostMateOptions);
    /**
     * Begins the handshake strategy
     * @param  {String} url The URL to send a handshake request to
     * @return {Promise}     Promise that resolves when the handshake is complete
     */
    sendHandshake(url?: string): Promise<unknown>;
}
/**
 * The entry point of the Child
 */
export declare class Model {
    child: Window;
    model: any;
    parent: Window;
    parentOrigin: string;
    /**
     * Initializes the child, model, parent, and responds to the Parents handshake
     * @param {Object} model Hash of values, functions, or promises
     * @return {Promise}       The Promise that resolves when the handshake has been received
     */
    constructor(model: any);
    /**
     * Responds to a handshake initiated by the Parent
     * @return {Promise} Resolves an object that exposes an API for the Child
     */
    sendHandshakeReply(): Promise<unknown>;
}
