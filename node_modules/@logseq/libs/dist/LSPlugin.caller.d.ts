import EventEmitter from 'eventemitter3';
import { PluginLocal } from './LSPlugin.core';
export declare const FLAG_AWAIT = "#await#response#";
export declare const LSPMSG = "#lspmsg#";
export declare const LSPMSG_ERROR_TAG = "#lspmsg#error#";
export declare const LSPMSG_SETTINGS = "#lspmsg#settings#";
export declare const LSPMSG_BEFORE_UNLOAD = "#lspmsg#beforeunload#";
export declare const LSPMSG_SYNC = "#lspmsg#reply#";
export declare const LSPMSG_READY = "#lspmsg#ready#";
export declare const LSPMSGFn: (id: string) => string;
export declare const AWAIT_LSPMSGFn: (id: string) => string;
/**
 * Call between core and user
 */
declare class LSPluginCaller extends EventEmitter {
    private _pluginLocal;
    private _connected;
    private _parent?;
    private _child?;
    private _shadow?;
    private _status?;
    private _userModel;
    private _call?;
    private _callUserModel?;
    private _debugTag;
    constructor(_pluginLocal: PluginLocal | null);
    connectToChild(): Promise<void>;
    connectToParent(userModel?: {}): Promise<any>;
    call(type: any, payload?: any): Promise<any>;
    callAsync(type: any, payload?: any): Promise<any>;
    callUserModel(type: string, payload?: any): Promise<any>;
    _setupIframeSandbox(): Promise<unknown>;
    _setupShadowSandbox(): Promise<void>;
    _extendUserModel(model: any): any;
    _getSandboxIframeContainer(): HTMLDivElement;
    _getSandboxShadowContainer(): HTMLDivElement;
    _getSandboxIframeRoot(): HTMLIFrameElement;
    _getSandboxShadowRoot(): HTMLElement;
    set debugTag(value: string);
    destroy(): Promise<void>;
}
export { LSPluginCaller };
